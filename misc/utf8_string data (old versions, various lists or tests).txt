function temp1()
{
		$rep = array(); $output = '';
		for ($i = 0x41; $i < 0x5b; $i++) $rep[$i] = $i + 0x20;
		for ($i = 0xc0; $i < 0xdf; $i++) $rep[$i] = $i + 0x20;
		for ($i = 0x100; $i < 0x138; $i+= 2) $rep[$i] = $i + 1;
		for ($i = 0x139; $i < 0x149; $i+= 2) $rep[$i] = $i + 1;
		for ($i = 0x14a; $i < 0x179; $i+= 2) $rep[$i] = $i + 1;
		for ($i = 0x179; $i < 0x17f; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x181] = 0x180;
		for ($i = 0x182; $i < 0x186; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x187] = 0x188;
		$rep[0x18a] = 0x189;
		$rep[0x18b] = 0x18c;
		$rep[0x18e] = 0x18f;
		$rep[0x191] = 0x192;
		$rep[0x198] = 0x199;
		$rep[0x19d] = 0x19e;
		
		for ($i = 0x1a0; $i < 0x1a6; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x1a7] = 0x1a8;
		for ($i = 0x1af; $i < 0x1b7; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x1b7] = 0x1ba;
		$rep[0x1b8] = 0x1b9;
		$rep[0x1bc] = 0x1bd;
		$rep[0x1c4] = 0x1c6;
		$rep[0x1c5] = 0x1c6;
		$rep[0x1c7] = 0x1c9;
		$rep[0x1c8] = 0x1c9;
		$rep[0x1ca] = 0x1cc;
		$rep[0x1cb] = 0x1cc;
		
		for ($i = 0x1cd; $i < 0x1dd; $i+= 2) $rep[$i] = $i + 1;
		for ($i = 0x1de; $i < 0x1f0; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x1f1] = 0x1f3;
		$rep[0x1f2] = 0x1f3;
		$rep[0x1f4] = 0x1f5;
		
		for ($i = 0x1f8; $i < 0x234; $i+= 2) $rep[$i] = $i + 1;
		$rep[0x23b] = 0x23c;
		$rep[0x241] = 0x242;
		
		for ($i = 0x246; $i < 0x250; $i+= 2) $rep[$i] = $i + 1;
		foreach ($rep as $in => $out)
		{
			$output .= '"' . $this->chunk($this->chr($in)) . '"=>"' . $this->chunk($this->chr($out)) . '",';
		}
}

$str = '
			[\x27\x41-\x5a\x61-\x7a]
			| \xc3[\x80-\x96\x98-\xb6\xb8-\xbf]
			| [\xc4-\xd5][\x80-\xbf]
			| \xd6[\x80-\xaf]
			| \xd7[\x90-\xaf]
			| \xd8[\xa1-\xbf]
			| \xd9[\x80-\xa7 \xb1-\xbf]
			| \xdb[\x80-\xaf]
			| \xe1 [\xba-\xbf] [\x80-\xbf]
			| \xe2 \x80 [\x80-\x8b]
			| \xef (
				\xac [\xa0-\xbf]
				| [\xad-\xb0] [\x80-\xbf]
				| \xb1 [\x80-\x9d]
				| [\xba-\xbe] [\x80-\xbf]
				| \xbf [\x80-\xbb]
			)
			';
			
$result = preg_match('/^
				[^\x00-\x26\x28-\x40\x5b-\x60\x7b-\x7e
				\x{a0}-\x{bf}\x{d7}\x{f7}
				\x{5b0}-\x{5cf}\x{5f0}-\x{620}
				\x{648}-\x{670}\x{680}-\x{6bf}
				\x{6f0}-\x{1e7f}\x{200c}-\x{fb19}
				\x{fc5e}-\x{fe7f}\x{fffc}-\x{10ffff}]*+
				/ux', $str, $matches);
			$i += strlen($matches[0]);
			$result = preg_match('/^
				[\x00-\x26\x28-\x40\x5b-\x60\x7b-\x7e
				\x{a0}-\x{bf}\x{d7}\x{f7}
				\x{5b0}-\x{5cf}\x{5f0}-\x{620}
				\x{648}-\x{670}\x{680}-\x{6bf}
				\x{6f0}-\x{1e7f}\x{200c}-\x{fb19}
				\x{fc5e}-\x{fe7f}\x{fffc}-\x{10ffff}]*+
				/xu', substr($str, strlen($matches[0])), $matches);
			$i += strlen($matches[0]);
			
function validate()
	// new validation, based heavily on regular expressions
	// this is much faster than what we had previously, but still pretty slow for in-memory stuff
	{
		$max = strlen($this->string);
		// next line is optimisation - no bracket, no returning matches
		if ($max < 240 && preg_match('/^[\x20-\x7e\x0a\x09\x0d]++$/', $this->string)) return true;
		for ($i = 0; $i < $max;)
		{  // done in a loop because preg can't cope with too many repetitions
			$result = preg_match('/
				^(?:
					[\x20-\x7e\x0a\x09\x0d]++
					| (?:[\xC2-\xDF][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:\xE0[\xA0-\xBF][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:\xED[\x80-\x9F][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:\xF0[\x90-\xBF][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:[\xF1-\xF3][\x80-\xBF]{3}[\x20-\x7e\x0a\x09\x0d]*+)++
					| (?:\xF4[\x80-\x8F][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]*+)++
				)++/x', substr($this->string, $i, 960), $matches); // 960 seems optimal
			if (!$result) return false;
			$i += strlen($matches[0]);
		}
		return true;
	}			
	
	
	function filter_slow($replace = '', $convert = true)
	// this is a _tolerant_ utf-8 filter.  it leaves valid utf-8 characters unharmed.
	{
		$max = strlen($this->string);
		// next line is optimisation - no bracket, no returning matches
		if ($max < 240 && preg_match('/^[\x20-\x7e\x0a\x09\x0d]++$/', $this->string)) return $this->string;
		$output = '';
		$errors = 0;
		for ($i = 0; $i < $max;)
		{
			$result = preg_match('/
				^(?:
					[\x20-\x7e\x0a\x09\x0d]++
					| (?:[\xC2-\xDF][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:\xE0[\xA0-\xBF][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:\xED[\x80-\x9F][\x80-\xBF][\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:\xF0[\x90-\xBF][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:[\xF1-\xF3][\x80-\xBF]{3}[\x20-\x7e\x0a\x09\x0d]?+)++
					| (?:\xF4[\x80-\x8F][\x80-\xBF]{2}[\x20-\x7e\x0a\x09\x0d]?+)++
				)++/x', substr($this->string, $i, 960), $matches); // 960 seems optimal
			if ($result)
				$output .= $matches[0];
			else
			{
				preg_match('/
				^(?:
					[\x7f-\xc1\x00-\x08\x0e-\x1f\xf5-\xff\x0b\x0c]++
					| (?:[\xC2-\xDF]				(?![\x80-\xBF]))++
					| (?:\xE0						(?![\xA0-\xBF][\x80-\xBF]))++
					| (?:[\xE1-\xEC\xEE\xEF]	(?![\x80-\xBF]{2}))++
					| (?:\xED						(?![\x80-\x9F][\x80-\xBF]))++
					| (?:\xF0						(?![\x90-\xBF][\x80-\xBF]{2}))++
					| (?:[\xF1-\xF3]				(?![\x80-\xBF]{3}))++
					| (?:\xF4						(?![\x80-\x8F][\x80-\xBF]{2}))++
				)++/x', substr($this->string, $i, 120), $matches);
				$output .= $convert 
					? $this->convert1252string($matches[0], $replace) 
					: $matches[0];
				$errors .= strlen($matches[0]);
			}
			$i += strlen($matches[0]);
		}
		return $output;
	}